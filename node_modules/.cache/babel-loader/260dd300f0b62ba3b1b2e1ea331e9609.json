{"ast":null,"code":"import _slicedToArray from \"D:\\\\Arek\\\\programowanie\\\\CODERSTRUST\\\\React\\\\proba\\\\proba\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Arek\\\\programowanie\\\\CODERSTRUST\\\\React\\\\proba\\\\proba\\\\src\\\\components\\\\gamelevels\\\\medium\\\\medium.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport Board2 from '../../board/index2';\nimport initializeDeckMedium from './deck2';\nimport { Link } from \"react-router-dom\";\nimport './medium.css';\n\nfunction Medium() {\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        counter = _useState2[0],\n        setCounter = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        cards = _useState4[0],\n        setCards = _useState4[1];\n\n  const _useState5 = useState([]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        flipped = _useState6[0],\n        setFlipped = _useState6[1];\n\n  const _useState7 = useState(400),\n        _useState8 = _slicedToArray(_useState7, 2),\n        dimension = _useState8[0],\n        setDimension = _useState8[1];\n\n  const _useState9 = useState([]),\n        _useState10 = _slicedToArray(_useState9, 2),\n        solved = _useState10[0],\n        setSolved = _useState10[1];\n\n  const _useState11 = useState(false),\n        _useState12 = _slicedToArray(_useState11, 2),\n        disabled = _useState12[0],\n        setDisabled = _useState12[1];\n\n  useEffect(() => {\n    resizeBoard();\n    setCards(initializeDeckMedium());\n  }, []);\n  useEffect(() => {\n    preloadImages();\n  }, cards);\n  useEffect(() => {\n    const resizeListener = window.addEventListener('resize', resizeBoard);\n    return () => window.removeEventListener('resize', resizeListener);\n  });\n\n  const handleClick = id => {\n    setDisabled(true);\n\n    if (solved.length == 14) {\n      setFlipped([id]);\n      alert(\"Gratulacje!!! Udało Ci się dopasować wszystkie obrazki. Zacznij od nowa\");\n    }\n\n    if (flipped.length === 0) {\n      setFlipped([id]);\n      setDisabled(false);\n      return;\n    } else {\n      if (sameCardClicked(id)) {\n        setDisabled(false);\n        return;\n      }\n\n      setFlipped([flipped[0], id]);\n\n      if (isMatch(id)) {\n        setSolved([...solved, flipped[0], id]);\n        setFlipped([]);\n        resetCards();\n      } else {\n        setTimeout(resetCards, 1500);\n      }\n    }\n  };\n\n  const preloadImages = () => {\n    cards.map(card => {\n      const src = \"/img/\".concat(card.type, \".png\");\n      new Image().src = src;\n    });\n  };\n\n  const resetCards = () => {\n    setFlipped([]);\n    setDisabled(false);\n  };\n\n  const sameCardClicked = id => flipped.includes(id);\n\n  const isMatch = id => {\n    const clickedCard = cards.find(card => card.id === id);\n    const flippedCard = cards.find(card => flipped[0] === card.id);\n    return flippedCard.type === clickedCard.type;\n  };\n\n  const resizeBoard = () => {\n    setDimension(Math.min(document.documentElement.clientWidth, document.documentElement.clientHeight));\n  };\n\n  return React.createElement(\"div\", {\n    className: \"App2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: \"/\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, \"Memory Game\"), \"\\xA0\", React.createElement(Link, {\n    to: \"/about\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, \"About this app\"))), React.createElement(\"div\", {\n    className: \"board\",\n    onClick: () => {\n      setCounter(counter + 1);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, \"Liczba klikni\\u0119\\u0107 = \", counter, \" \"), \">\", React.createElement(Board2, {\n    className: \"board\",\n    dimension: dimension,\n    cards: cards,\n    flipped: flipped,\n    handleClick: handleClick,\n    disabled: disabled,\n    solved: solved,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  })));\n}\n\nexport default Medium;","map":{"version":3,"sources":["D:\\Arek\\programowanie\\CODERSTRUST\\React\\proba\\proba\\src\\components\\gamelevels\\medium\\medium.jsx"],"names":["React","useState","useEffect","Board2","initializeDeckMedium","Link","Medium","counter","setCounter","cards","setCards","flipped","setFlipped","dimension","setDimension","solved","setSolved","disabled","setDisabled","resizeBoard","preloadImages","resizeListener","window","addEventListener","removeEventListener","handleClick","id","length","alert","sameCardClicked","isMatch","resetCards","setTimeout","map","card","src","type","Image","includes","clickedCard","find","flippedCard","Math","min","document","documentElement","clientWidth","clientHeight"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Board2 from '../../board/index2';\r\nimport initializeDeckMedium from './deck2';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport './medium.css';\r\n\r\n\r\nfunction Medium() {\r\n\r\n    const [counter, setCounter] = useState(0);\r\n    const [cards, setCards] = useState([])\r\n    const [flipped, setFlipped] = useState([])\r\n    const [dimension, setDimension] = useState(400)\r\n    const [solved, setSolved] = useState([])\r\n    const [disabled, setDisabled] = useState(false)\r\n\r\n    useEffect(() => {\r\n        resizeBoard()\r\n        setCards(initializeDeckMedium())\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        preloadImages()\r\n    }, cards)\r\n\r\n\r\n    useEffect(() => {\r\n        const resizeListener = window.addEventListener('resize', resizeBoard)\r\n\r\n        return () => window.removeEventListener('resize', resizeListener)\r\n    })\r\n\r\n    const handleClick = (id) => {\r\n        setDisabled(true)\r\n        if (solved.length == 14) {\r\n            setFlipped([id])\r\n            alert(\"Gratulacje!!! Udało Ci się dopasować wszystkie obrazki. Zacznij od nowa\");\r\n        }\r\n        if (flipped.length === 0) {\r\n            setFlipped([id])\r\n            setDisabled(false)\r\n            return\r\n        } else {\r\n            if (sameCardClicked(id)) {\r\n                setDisabled(false)\r\n                return\r\n            }\r\n            setFlipped([flipped[0], id])\r\n            if (isMatch(id)) {\r\n                setSolved([...solved, flipped[0], id])\r\n                setFlipped([])\r\n                resetCards()\r\n            } else {\r\n                setTimeout(resetCards, 1500)\r\n            }\r\n        }\r\n    }\r\n\r\n    const preloadImages = () => {\r\n        cards.map((card) => {\r\n            const src = `/img/${card.type}.png`\r\n            new Image().src = src\r\n        })\r\n    }\r\n\r\n    const resetCards = () => {\r\n        setFlipped([])\r\n        setDisabled(false)\r\n\r\n    }\r\n\r\n    const sameCardClicked = (id) => flipped.includes(id)\r\n\r\n    const isMatch = (id) => {\r\n        const clickedCard = cards.find((card) => card.id === id)\r\n        const flippedCard = cards.find((card) => flipped[0] === card.id)\r\n        return flippedCard.type === clickedCard.type\r\n    }\r\n\r\n    const resizeBoard = () => {\r\n        setDimension(Math.min(\r\n            document.documentElement.clientWidth,\r\n            document.documentElement.clientHeight,\r\n        ))\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App2\">\r\n            <h4>\r\n                <span>\r\n                    <Link to=\"/\">Memory Game</Link>&nbsp;<Link to=\"/about\">About this app</Link>\r\n                </span>\r\n            </h4>\r\n            \r\n            <div className=\"board\" onClick={() => { setCounter(counter + 1)}}>\r\n                <h3>Liczba kliknięć = {counter} </h3>>\r\n                <Board2 className=\"board\"\r\n                    dimension={dimension}\r\n                    cards={cards}\r\n                    flipped={flipped}\r\n                    handleClick={handleClick}\r\n                    disabled={disabled}\r\n                    solved={solved}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Medium;"]},"metadata":{},"sourceType":"module"}