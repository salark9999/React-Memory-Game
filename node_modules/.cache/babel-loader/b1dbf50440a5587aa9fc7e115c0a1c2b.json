{"ast":null,"code":"import _slicedToArray from \"D:\\\\Arek\\\\programowanie\\\\CODERSTRUST\\\\React\\\\proba\\\\proba\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Arek\\\\programowanie\\\\CODERSTRUST\\\\React\\\\proba\\\\proba\\\\src\\\\App.js\";\nimport React, { useState, useEffect } from 'react';\nimport Board from './components/board';\nimport initializeDeck from './components/gamelevels/deck';\nimport initializeDeckMedium from './deck/deck2';\nimport initializeDeckLevelHard from './deck/deck3';\nimport Easy from './components/gamelevels/easy';\nimport './App.css';\n\nfunction App() {\n  /* const [cards, setCards] = useState([])\n   const [flipped, setFlipped] = useState([])\n   const [dimension, setDimension] = useState(400)\n   const [solved, setSolved] = useState([])\n   const [disabled, setDisabled] = useState(false)\n    useEffect(() => {\n     resizeBoard()\n     setCards(initializeDeck())\n   }, [])\n    useEffect(() => {\n     preloadImages()\n   }, cards)\n  \n   useEffect(() => {\n     const resizeListener = window.addEventListener('resize', resizeBoard)\n   \n     return () => window.removeEventListener('resize', resizeListener)\n   })\n    const handleClick = (id) => {\n     setDisabled(true)\n     if (flipped.length === 0) {\n       setFlipped([id])\n       setDisabled(false)\n       return\n     } else {\n       if (sameCardClicked(id)) {\n       setDisabled(false)\n       return\n       }\n       setFlipped([flipped[0], id])\n       if (isMatch(id)) {\n         setSolved([...solved, flipped[0], id])\n         setFlipped([])\n         resetCards()\n       } else {\n         setTimeout(resetCards, 1500)\n       }\n     }\n   }\n    const preloadImages = () => {\n     cards.map((card) => {\n       const src = `/img/${card.type}.png`\n       new Image().src = src\n     })\n   }\n   \n   const resetCards = () => {\n     setFlipped([])\n     setDisabled(false)\n   \n   \n    \n    const sameCardClicked = (id) => flipped.includes(id)\n    const isMatch = (id) => {\n     const clickedCard = cards.find((card) => card.id === id)\n     const flippedCard = cards.find((card) => flipped[0] === card.id)\n     return flippedCard.type === clickedCard.type\n   }\n    const resizeBoard = () => {\n     setDimension(Math.min(\n       document.documentElement.clientWidth,\n       document.documentElement.clientHeight,\n     ))\n   } */\n  const startGame = () => {\n    function Easy() {\n      const _useState = useState([]),\n            _useState2 = _slicedToArray(_useState, 2),\n            cards = _useState2[0],\n            setCards = _useState2[1];\n\n      const _useState3 = useState([]),\n            _useState4 = _slicedToArray(_useState3, 2),\n            flipped = _useState4[0],\n            setFlipped = _useState4[1];\n\n      const _useState5 = useState(400),\n            _useState6 = _slicedToArray(_useState5, 2),\n            dimension = _useState6[0],\n            setDimension = _useState6[1];\n\n      const _useState7 = useState([]),\n            _useState8 = _slicedToArray(_useState7, 2),\n            solved = _useState8[0],\n            setSolved = _useState8[1];\n\n      const _useState9 = useState(false),\n            _useState10 = _slicedToArray(_useState9, 2),\n            disabled = _useState10[0],\n            setDisabled = _useState10[1];\n\n      useEffect(() => {\n        resizeBoard();\n        setCards(initializeDeck());\n      }, []);\n      useEffect(() => {\n        preloadImages();\n      }, cards);\n      useEffect(() => {\n        const resizeListener = window.addEventListener('resize', resizeBoard);\n        return () => window.removeEventListener('resize', resizeListener);\n      });\n\n      const handleClick = id => {\n        setDisabled(true);\n\n        if (flipped.length === 0) {\n          setFlipped([id]);\n          setDisabled(false);\n          return;\n        } else {\n          if (sameCardClicked(id)) {\n            setDisabled(false);\n            return;\n          }\n\n          setFlipped([flipped[0], id]);\n\n          if (isMatch(id)) {\n            setSolved([...solved, flipped[0], id]);\n            setFlipped([]);\n            resetCards();\n          } else {\n            setTimeout(resetCards, 1500);\n          }\n        }\n      };\n\n      const preloadImages = () => {\n        cards.map(card => {\n          const src = \"/img/\".concat(card.type, \".png\");\n          new Image().src = src;\n        });\n      };\n\n      const resetCards = () => {\n        setFlipped([]);\n        setDisabled(false);\n      };\n\n      const startGame = () => {};\n\n      const sameCardClicked = id => flipped.includes(id);\n\n      const isMatch = id => {\n        const clickedCard = cards.find(card => card.id === id);\n        const flippedCard = cards.find(card => flipped[0] === card.id);\n        return flippedCard.type === clickedCard.type;\n      };\n\n      const resizeBoard = () => {\n        setDimension(Math.min(document.documentElement.clientWidth, document.documentElement.clientHeight));\n      };\n\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, \"Memory Game\"), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, \"Match them all !\"), React.createElement(\"div\", {\n        className: \"board\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, React.createElement(Board, {\n        className: \"board\",\n        dimension: dimension,\n        cards: cards,\n        flipped: flipped,\n        handleClick: handleClick,\n        disabled: disabled,\n        solved: solved,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      })));\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, \"Memory Game\"), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }, \"Match them all !\"), React.createElement(\"button\", {\n    onClick: startGame(Easy()),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, \" Easy Game \"));\n}\n\nexport default App;","map":{"version":3,"sources":["D:\\Arek\\programowanie\\CODERSTRUST\\React\\proba\\proba\\src\\App.js"],"names":["React","useState","useEffect","Board","initializeDeck","initializeDeckMedium","initializeDeckLevelHard","Easy","App","startGame","cards","setCards","flipped","setFlipped","dimension","setDimension","solved","setSolved","disabled","setDisabled","resizeBoard","preloadImages","resizeListener","window","addEventListener","removeEventListener","handleClick","id","length","sameCardClicked","isMatch","resetCards","setTimeout","map","card","src","type","Image","includes","clickedCard","find","flippedCard","Math","min","document","documentElement","clientWidth","clientHeight"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Board from './components/board';\nimport initializeDeck from './components/gamelevels/deck';\nimport initializeDeckMedium from './deck/deck2';\nimport initializeDeckLevelHard from './deck/deck3';\nimport Easy from './components/gamelevels/easy';\nimport './App.css';\n\n\nfunction App() {\n /* const [cards, setCards] = useState([])\n  const [flipped, setFlipped] = useState([])\n  const [dimension, setDimension] = useState(400)\n  const [solved, setSolved] = useState([])\n  const [disabled, setDisabled] = useState(false)\n\n  useEffect(() => {\n    resizeBoard()\n    setCards(initializeDeck())\n  }, [])\n\n  useEffect(() => {\n    preloadImages()\n  }, cards)\n\n\n  useEffect(() => {\n    const resizeListener = window.addEventListener('resize', resizeBoard)\n  \n    return () => window.removeEventListener('resize', resizeListener)\n  })\n\n  const handleClick = (id) => {\n    setDisabled(true)\n    if (flipped.length === 0) {\n      setFlipped([id])\n      setDisabled(false)\n      return\n    } else {\n      if (sameCardClicked(id)) {\n      setDisabled(false)\n      return\n      }\n      setFlipped([flipped[0], id])\n      if (isMatch(id)) {\n        setSolved([...solved, flipped[0], id])\n        setFlipped([])\n        resetCards()\n      } else {\n        setTimeout(resetCards, 1500)\n      }\n    }\n  }\n\n  const preloadImages = () => {\n    cards.map((card) => {\n      const src = `/img/${card.type}.png`\n      new Image().src = src\n    })\n  }\n  \n  const resetCards = () => {\n    setFlipped([])\n    setDisabled(false)\n  \n  \n   \n\n  const sameCardClicked = (id) => flipped.includes(id)\n\n  const isMatch = (id) => {\n    const clickedCard = cards.find((card) => card.id === id)\n    const flippedCard = cards.find((card) => flipped[0] === card.id)\n    return flippedCard.type === clickedCard.type\n  }\n\n  const resizeBoard = () => {\n    setDimension(Math.min(\n      document.documentElement.clientWidth,\n      document.documentElement.clientHeight,\n    ))\n  } */\n\n\nconst startGame = () => { function Easy() {\n  const [cards, setCards] = useState([])\n  const [flipped, setFlipped] = useState([])\n  const [dimension, setDimension] = useState(400)\n  const [solved, setSolved] = useState([])\n  const [disabled, setDisabled] = useState(false)\n\n  useEffect(() => {\n    resizeBoard()\n    setCards(initializeDeck())\n  }, [])\n\n  useEffect(() => {\n    preloadImages()\n  }, cards)\n\n\n  useEffect(() => {\n    const resizeListener = window.addEventListener('resize', resizeBoard)\n  \n    return () => window.removeEventListener('resize', resizeListener)\n  })\n\n  const handleClick = (id) => {\n    setDisabled(true)\n    if (flipped.length === 0) {\n      setFlipped([id])\n      setDisabled(false)\n      return\n    } else {\n      if (sameCardClicked(id)) {\n      setDisabled(false)\n      return\n      }\n      setFlipped([flipped[0], id])\n      if (isMatch(id)) {\n        setSolved([...solved, flipped[0], id])\n        setFlipped([])\n        resetCards()\n      } else {\n        setTimeout(resetCards, 1500)\n      }\n    }\n  }\n\n  const preloadImages = () => {\n    cards.map((card) => {\n      const src = `/img/${card.type}.png`\n      new Image().src = src\n    })\n  }\n  \n  const resetCards = () => {\n    setFlipped([])\n    setDisabled(false)\n  \n  }\n  const startGame = () => {\n  \n  }\n   \n\n  const sameCardClicked = (id) => flipped.includes(id)\n\n  const isMatch = (id) => {\n    const clickedCard = cards.find((card) => card.id === id)\n    const flippedCard = cards.find((card) => flipped[0] === card.id)\n    return flippedCard.type === clickedCard.type\n  }\n\n  const resizeBoard = () => {\n    setDimension(Math.min(\n      document.documentElement.clientWidth,\n      document.documentElement.clientHeight,\n    ))\n  } \n\n\n  return (\n    <div className=\"App\">\n      <h1>Memory Game</h1>\n      <h2>Match them all !</h2>\n    <div className=\"board\">\n        <Board className=\"board\"\n          dimension={dimension}\n          cards={cards}\n          flipped={flipped}\n          handleClick={handleClick}\n          disabled={disabled}\n          solved={solved}\n        />\n        \n        \n      </div> \n    </div>\n  );\n\n}\n}\n\n  return (\n\n    <div className=\"App\">\n      <h1>Memory Game</h1>\n      <h2>Match them all !</h2>\n   \n        \n        <button\n          onClick={startGame(Easy())}\n        > Easy Game </button>\n      </div> \n    \n  );\n  }\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}