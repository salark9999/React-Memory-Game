{"ast":null,"code":"import _slicedToArray from \"D:\\\\Arek\\\\programowanie\\\\CODERSTRUST\\\\React\\\\proba\\\\proba\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Arek\\\\programowanie\\\\CODERSTRUST\\\\React\\\\proba\\\\proba\\\\src\\\\components\\\\EventHandler\\\\EventHandler.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Easy from '../gamelevels/easy';\n\nconst EventHandler = props => {\n  return React.createElement(\"div\", {\n    onClick: () => {\n      Easy = () => {\n        const _useState = useState(1),\n              _useState2 = _slicedToArray(_useState, 2),\n              counter = _useState2[0],\n              setCounter = _useState2[1];\n\n        const _useState3 = useState([]),\n              _useState4 = _slicedToArray(_useState3, 2),\n              cards = _useState4[0],\n              setCards = _useState4[1];\n\n        const _useState5 = useState([]),\n              _useState6 = _slicedToArray(_useState5, 2),\n              flipped = _useState6[0],\n              setFlipped = _useState6[1];\n\n        const _useState7 = useState(400),\n              _useState8 = _slicedToArray(_useState7, 2),\n              dimension = _useState8[0],\n              setDimension = _useState8[1];\n\n        const _useState9 = useState([]),\n              _useState10 = _slicedToArray(_useState9, 2),\n              solved = _useState10[0],\n              setSolved = _useState10[1];\n\n        const _useState11 = useState(false),\n              _useState12 = _slicedToArray(_useState11, 2),\n              disabled = _useState12[0],\n              setDisabled = _useState12[1];\n\n        useEffect(() => {\n          resizeBoard();\n          setCards(initializeDeck());\n        }, []);\n        useEffect(() => {\n          preloadImages();\n        }, cards);\n        useEffect(() => {\n          const resizeListener = window.addEventListener('resize', resizeBoard);\n          return () => window.removeEventListener('resize', resizeListener);\n        });\n\n        const handleClick = id => {\n          setDisabled(true);\n\n          if (flipped.length === 0) {\n            setFlipped([id]);\n            setDisabled(false);\n            return;\n          } else {\n            if (sameCardClicked(id)) {\n              setDisabled(false);\n              return;\n            }\n\n            setFlipped([flipped[0], id]);\n\n            if (isMatch(id)) {\n              setSolved([...solved, flipped[0], id]);\n              setFlipped([]);\n              resetCards();\n            } else {\n              setTimeout(resetCards, 1500);\n            }\n          }\n        };\n\n        const preloadImages = () => {\n          cards.map(card => {\n            const src = \"/img/\".concat(card.type, \".png\");\n            new Image().src = src;\n          });\n        };\n\n        const resetCards = () => {\n          setFlipped([]);\n          setDisabled(false);\n        };\n\n        const startGame = () => {};\n\n        const sameCardClicked = id => flipped.includes(id);\n\n        const isMatch = id => {\n          const clickedCard = cards.find(card => card.id === id);\n          const flippedCard = cards.find(card => flipped[0] === card.id);\n          return flippedCard.type === clickedCard.type;\n        };\n\n        const resizeBoard = () => {\n          setDimension(Math.min(document.documentElement.clientWidth, document.documentElement.clientHeight));\n        };\n\n        return React.createElement(\"div\", {\n          className: \"App\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89\n          },\n          __self: this\n        }, React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90\n          },\n          __self: this\n        }, \"Memory Game\"), React.createElement(\"h2\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        }, \"Match them all !\"), React.createElement(\"div\", {\n          className: \"board\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }, React.createElement(Board, {\n          className: \"board\",\n          dimension: dimension,\n          cards: cards,\n          flipped: flipped,\n          handleClick: handleClick,\n          disabled: disabled,\n          solved: solved,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        })));\n      };\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, \"Easy\");\n};\n\nEventHandler.defaultProps = {};\nEventHandler.defaultProps = {};\nexport default EventHandler;","map":{"version":3,"sources":["D:\\Arek\\programowanie\\CODERSTRUST\\React\\proba\\proba\\src\\components\\EventHandler\\EventHandler.jsx"],"names":["React","PropTypes","Easy","EventHandler","props","useState","counter","setCounter","cards","setCards","flipped","setFlipped","dimension","setDimension","solved","setSolved","disabled","setDisabled","useEffect","resizeBoard","initializeDeck","preloadImages","resizeListener","window","addEventListener","removeEventListener","handleClick","id","length","sameCardClicked","isMatch","resetCards","setTimeout","map","card","src","type","Image","startGame","includes","clickedCard","find","flippedCard","Math","min","document","documentElement","clientWidth","clientHeight","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Easy from '../gamelevels/easy';\r\n\r\nconst EventHandler = props => {\r\n  return (\r\n    <div\r\n      onClick={() => { \r\n        Easy = () => {\r\n          const [counter, setCounter] = useState(1);\r\n          const [cards, setCards] = useState([])\r\n          const [flipped, setFlipped] = useState([])\r\n          const [dimension, setDimension] = useState(400)\r\n          const [solved, setSolved] = useState([])\r\n          const [disabled, setDisabled] = useState(false)\r\n        \r\n          useEffect(() => {\r\n            resizeBoard()\r\n            setCards(initializeDeck())\r\n          }, [])\r\n        \r\n          useEffect(() => {\r\n            preloadImages()\r\n          }, cards)\r\n        \r\n        \r\n          useEffect(() => {\r\n            const resizeListener = window.addEventListener('resize', resizeBoard)\r\n          \r\n            return () => window.removeEventListener('resize', resizeListener)\r\n          })\r\n        \r\n          const handleClick = (id) => {\r\n            setDisabled(true)\r\n            if (flipped.length === 0) {\r\n              setFlipped([id])\r\n              setDisabled(false)\r\n              return\r\n            } else {\r\n              if (sameCardClicked(id)) {\r\n              setDisabled(false)\r\n              return\r\n              }\r\n              setFlipped([flipped[0], id])\r\n              if (isMatch(id)) {\r\n                setSolved([...solved, flipped[0], id])\r\n                setFlipped([])\r\n                resetCards()\r\n              } else {\r\n                setTimeout(resetCards, 1500)\r\n              }\r\n            }\r\n          }\r\n        \r\n          const preloadImages = () => {\r\n            cards.map((card) => {\r\n              const src = `/img/${card.type}.png`\r\n              new Image().src = src\r\n            })\r\n          }\r\n          \r\n          const resetCards = () => {\r\n            setFlipped([])\r\n            setDisabled(false)\r\n          \r\n          }\r\n          const startGame = () => {\r\n          \r\n          }\r\n          \r\n        \r\n          const sameCardClicked = (id) => flipped.includes(id)\r\n        \r\n          const isMatch = (id) => {\r\n            const clickedCard = cards.find((card) => card.id === id)\r\n            const flippedCard = cards.find((card) => flipped[0] === card.id)\r\n            return flippedCard.type === clickedCard.type\r\n          }\r\n        \r\n          const resizeBoard = () => {\r\n            setDimension(Math.min(\r\n              document.documentElement.clientWidth,\r\n              document.documentElement.clientHeight,\r\n            ))\r\n          } \r\n        \r\n        \r\n          return (\r\n            <div className=\"App\">\r\n              <h1>Memory Game</h1>\r\n              <h2>Match them all !</h2>\r\n            <div className=\"board\">\r\n                <Board className=\"board\"\r\n                  dimension={dimension}\r\n                  cards={cards}\r\n                  flipped={flipped}\r\n                  handleClick={handleClick}\r\n                  disabled={disabled}\r\n                  solved={solved}\r\n                />\r\n              </div> \r\n            </div>\r\n          );\r\n        }\r\n        }\r\n      }\r\n    \r\n    >\r\n      Easy\r\n    </div >\r\n  )\r\n}\r\n     \r\n            \r\nEventHandler.defaultProps = {};\r\nEventHandler.defaultProps = {};\r\n\r\nexport default EventHandler;\r\n"]},"metadata":{},"sourceType":"module"}