{"ast":null,"code":"import _slicedToArray from \"D:\\\\Arek\\\\programowanie\\\\CODERSTRUST\\\\React\\\\proba\\\\proba\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Arek\\\\programowanie\\\\CODERSTRUST\\\\React\\\\proba\\\\proba\\\\src\\\\components\\\\gamelevels\\\\easy.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport Board from '../board';\nimport initializeDeck from './deck';\n\nclass Easy extends component {\n  render() {\n    const _useState = useState([]),\n          _useState2 = _slicedToArray(_useState, 2),\n          cards = _useState2[0],\n          setCards = _useState2[1];\n\n    const _useState3 = useState([]),\n          _useState4 = _slicedToArray(_useState3, 2),\n          flipped = _useState4[0],\n          setFlipped = _useState4[1];\n\n    const _useState5 = useState(400),\n          _useState6 = _slicedToArray(_useState5, 2),\n          dimension = _useState6[0],\n          setDimension = _useState6[1];\n\n    const _useState7 = useState([]),\n          _useState8 = _slicedToArray(_useState7, 2),\n          solved = _useState8[0],\n          setSolved = _useState8[1];\n\n    const _useState9 = useState(false),\n          _useState10 = _slicedToArray(_useState9, 2),\n          disabled = _useState10[0],\n          setDisabled = _useState10[1];\n\n    useEffect(() => {\n      resizeBoard();\n      setCards(initializeDeck());\n    }, []);\n    useEffect(() => {\n      preloadImages();\n    }, cards);\n    useEffect(() => {\n      const resizeListener = window.addEventListener('resize', resizeBoard);\n      return () => window.removeEventListener('resize', resizeListener);\n    });\n\n    const handleClick = id => {\n      setDisabled(true);\n\n      if (flipped.length === 0) {\n        setFlipped([id]);\n        setDisabled(false);\n        return;\n      } else {\n        if (sameCardClicked(id)) {\n          setDisabled(false);\n          return;\n        }\n\n        setFlipped([flipped[0], id]);\n\n        if (isMatch(id)) {\n          setSolved([...solved, flipped[0], id]);\n          setFlipped([]);\n          resetCards();\n        } else {\n          setTimeout(resetCards, 1500);\n        }\n      }\n    };\n\n    const preloadImages = () => {\n      cards.map(card => {\n        const src = \"/img/\".concat(card.type, \".png\");\n        new Image().src = src;\n      });\n    };\n\n    const resetCards = () => {\n      setFlipped([]);\n      setDisabled(false);\n    };\n\n    const startGame = () => {};\n\n    const sameCardClicked = id => flipped.includes(id);\n\n    const isMatch = id => {\n      const clickedCard = cards.find(card => card.id === id);\n      const flippedCard = cards.find(card => flipped[0] === card.id);\n      return flippedCard.type === clickedCard.type;\n    };\n\n    const resizeBoard = () => {\n      setDimension(Math.min(document.documentElement.clientWidth, document.documentElement.clientHeight));\n    };\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Memory Game\"), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"Match them all !\"), React.createElement(\"div\", {\n      className: \"board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(Board, {\n      className: \"board\",\n      dimension: dimension,\n      cards: cards,\n      flipped: flipped,\n      handleClick: handleClick,\n      disabled: disabled,\n      solved: solved,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: startGame(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \" start Game \")));\n  }\n\n}\n\nexport default Easy;","map":{"version":3,"sources":["D:\\Arek\\programowanie\\CODERSTRUST\\React\\proba\\proba\\src\\components\\gamelevels\\easy.jsx"],"names":["React","useState","useEffect","Board","initializeDeck","Easy","component","render","cards","setCards","flipped","setFlipped","dimension","setDimension","solved","setSolved","disabled","setDisabled","resizeBoard","preloadImages","resizeListener","window","addEventListener","removeEventListener","handleClick","id","length","sameCardClicked","isMatch","resetCards","setTimeout","map","card","src","type","Image","startGame","includes","clickedCard","find","flippedCard","Math","min","document","documentElement","clientWidth","clientHeight"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Board from '../board';\r\nimport initializeDeck from './deck';\r\n\r\n\r\nclass Easy extends component{\r\n  render(){\r\n     const [cards, setCards] = useState([])\r\n     const [flipped, setFlipped] = useState([])\r\n     const [dimension, setDimension] = useState(400)\r\n     const [solved, setSolved] = useState([])\r\n     const [disabled, setDisabled] = useState(false)\r\n   \r\n     useEffect(() => {\r\n       resizeBoard()\r\n       setCards(initializeDeck())\r\n     }, [])\r\n   \r\n     useEffect(() => {\r\n       preloadImages()\r\n     }, cards)\r\n   \r\n   \r\n     useEffect(() => {\r\n       const resizeListener = window.addEventListener('resize', resizeBoard)\r\n     \r\n       return () => window.removeEventListener('resize', resizeListener)\r\n     })\r\n   \r\n     const handleClick = (id) => {\r\n       setDisabled(true)\r\n       if (flipped.length === 0) {\r\n         setFlipped([id])\r\n         setDisabled(false)\r\n         return\r\n       } else {\r\n         if (sameCardClicked(id)) {\r\n         setDisabled(false)\r\n         return\r\n         }\r\n         setFlipped([flipped[0], id])\r\n         if (isMatch(id)) {\r\n           setSolved([...solved, flipped[0], id])\r\n           setFlipped([])\r\n           resetCards()\r\n         } else {\r\n           setTimeout(resetCards, 1500)\r\n         }\r\n       }\r\n     }\r\n   \r\n     const preloadImages = () => {\r\n       cards.map((card) => {\r\n         const src = `/img/${card.type}.png`\r\n         new Image().src = src\r\n       })\r\n     }\r\n     \r\n     const resetCards = () => {\r\n       setFlipped([])\r\n       setDisabled(false)\r\n     \r\n     }\r\n     const startGame = () => {\r\n     \r\n     }\r\n      \r\n   \r\n     const sameCardClicked = (id) => flipped.includes(id)\r\n   \r\n     const isMatch = (id) => {\r\n       const clickedCard = cards.find((card) => card.id === id)\r\n       const flippedCard = cards.find((card) => flipped[0] === card.id)\r\n       return flippedCard.type === clickedCard.type\r\n     }\r\n   \r\n     const resizeBoard = () => {\r\n       setDimension(Math.min(\r\n         document.documentElement.clientWidth,\r\n         document.documentElement.clientHeight,\r\n       ))\r\n     } \r\n   \r\n   \r\n     return (\r\n       <div className=\"App\">\r\n         <h1>Memory Game</h1>\r\n         <h2>Match them all !</h2>\r\n       <div className=\"board\">\r\n           <Board className=\"board\"\r\n             dimension={dimension}\r\n             cards={cards}\r\n             flipped={flipped}\r\n             handleClick={handleClick}\r\n             disabled={disabled}\r\n             solved={solved}\r\n           />\r\n           \r\n           <button\r\n             onClick={startGame()}\r\n           > start Game </button>\r\n         </div> \r\n       </div>\r\n     );\r\n   }\r\n  }\r\n   \r\n   export default Easy;\r\n   "]},"metadata":{},"sourceType":"module"}