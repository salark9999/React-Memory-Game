{"ast":null,"code":"import _slicedToArray from \"D:\\\\Arek\\\\programowanie\\\\CODERSTRUST\\\\React\\\\proba\\\\proba\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Arek\\\\programowanie\\\\CODERSTRUST\\\\React\\\\proba\\\\proba\\\\src\\\\App.js\";\nimport React, { useState, useEffect } from 'react';\nimport Board from './components/board';\nimport initializeDeck from './deck';\n\nfunction App() {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        cards = _useState2[0],\n        setCards = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        flipped = _useState4[0],\n        setFlipped = _useState4[1];\n\n  const _useState5 = useState(400),\n        _useState6 = _slicedToArray(_useState5, 2),\n        dimension = _useState6[0],\n        setDimension = _useState6[1];\n\n  const _useState7 = useState([]),\n        _useState8 = _slicedToArray(_useState7, 2),\n        solved = _useState8[0],\n        setSolved = _useState8[1];\n\n  const _useState9 = useState(false),\n        _useState10 = _slicedToArray(_useState9, 2),\n        disabled = _useState10[0],\n        setDisabled = _useState10[1];\n\n  useEffect(() => {\n    resizeBoard();\n    setCards(initializeDeck());\n  }, []);\n  useEffect(() => {\n    const resizeListener = window.addEventListener('resize', resizeBoard);\n    return () => window.removeEventListener('resize', resizeListener);\n  });\n\n  const handleClick = id => {\n    setDisabled(true);\n\n    if (flipped.length === 0) {\n      setFlipped([id]);\n      setDisabled(false);\n      return;\n    } else {\n      if (sameCardClicked(id)) return;\n      setFlipped([flipped[0], id]);\n\n      if (isMatch(id)) {\n        setSolved([...solved, flipped[0], id]);\n        setFlipped([]);\n        resetCards();\n      } else {\n        setTimeout(resetCards, 2000);\n      }\n    }\n  };\n\n  const resetCards = () => {\n    setFlipped([]);\n    setDisabled(false);\n  };\n\n  const sameCardClicked = id => flipped.includes(id);\n\n  const isMatch = id => {\n    const clickedCard = cards.find(card => card.id === id);\n    const flippedCard = cards.find(card => flipped[0] === card.id);\n    return flippedCard.type === clickedCard.type;\n  };\n\n  const resizeBoard = () => {\n    setDimension(Math.min(document.documentElement.clientWidth, document.documentElement.clientHeight));\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, \"Memory Game\"), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, \"Choose the right card\"), React.createElement(Board, {\n    dimension: dimension,\n    cards: cards,\n    flipped: flipped,\n    handleClick: handleClick,\n    disabled: disabled,\n    solved: solved,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["D:\\Arek\\programowanie\\CODERSTRUST\\React\\proba\\proba\\src\\App.js"],"names":["React","useState","useEffect","Board","initializeDeck","App","cards","setCards","flipped","setFlipped","dimension","setDimension","solved","setSolved","disabled","setDisabled","resizeBoard","resizeListener","window","addEventListener","removeEventListener","handleClick","id","length","sameCardClicked","isMatch","resetCards","setTimeout","includes","clickedCard","find","card","flippedCard","type","Math","min","document","documentElement","clientWidth","clientHeight"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Board from './components/board';\n\nimport initializeDeck from './deck';\n\nfunction App() {\n  const [cards, setCards] = useState([])\n  const [flipped, setFlipped] = useState([])\n  const [dimension, setDimension] = useState(400)\n  const [solved, setSolved] = useState([])\n  const [disabled, setDisabled] = useState(false)\n\n  useEffect(() => {\n    resizeBoard()\n    setCards(initializeDeck())\n  }, [])\n\n  useEffect(() => {\n    const resizeListener = window.addEventListener('resize', resizeBoard)\n  \n    return () => window.removeEventListener('resize', resizeListener)\n  })\n\n  const handleClick = (id) => {\n    setDisabled(true)\n    if (flipped.length === 0) {\n      setFlipped([id])\n      setDisabled(false)\n      return\n    } else {\n      if (sameCardClicked(id)) return\n      setFlipped([flipped[0], id])\n      if (isMatch(id)) {\n        setSolved([...solved, flipped[0], id])\n        setFlipped([])\n        resetCards()\n      } else {\n        setTimeout(resetCards, 2000)\n      }\n    }\n  }\n  const resetCards = () => {\n    setFlipped([])\n    setDisabled(false)\n  }\n\n  const sameCardClicked = (id) => flipped.includes(id)\n\n  const isMatch = (id) => {\n    const clickedCard = cards.find((card) => card.id === id)\n    const flippedCard = cards.find((card) => flipped[0] === card.id)\n    return flippedCard.type === clickedCard.type\n  }\n\n  const resizeBoard = () => {\n    setDimension(Math.min(\n      document.documentElement.clientWidth,\n      document.documentElement.clientHeight,\n    ))\n  }\n\n  return (\n    <div>\n     <h1>Memory Game</h1>\n     <h2>Choose the right card</h2>\n     <Board\n      dimension={dimension}\n      cards={cards}\n      flipped={flipped}\n      handleClick={handleClick}\n      disabled={disabled}\n      solved={solved}\n      />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}