{"ast":null,"code":"import _slicedToArray from \"D:\\\\Arek\\\\programowanie\\\\CODERSTRUST\\\\React\\\\proba\\\\proba\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Arek\\\\programowanie\\\\CODERSTRUST\\\\React\\\\proba\\\\proba\\\\src\\\\components\\\\EventHandler\\\\EventHandler.jsx\";\nimport React, { Component, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Board from '../board';\nimport initializeDeck from '../gamelevels/deck';\nimport Counter from '../counter/Counter'; //import Easy from '../gamelevels/easy';\n\nconst _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      cards = _useState2[0],\n      setCards = _useState2[1];\n\nconst _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      flipped = _useState4[0],\n      setFlipped = _useState4[1];\n\nconst _useState5 = useState(400),\n      _useState6 = _slicedToArray(_useState5, 2),\n      dimension = _useState6[0],\n      setDimension = _useState6[1];\n\nconst _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      solved = _useState8[0],\n      setSolved = _useState8[1];\n\nconst _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      disabled = _useState10[0],\n      setDisabled = _useState10[1];\n\nconst handleClick = id => {\n  setDisabled(true);\n\n  if (flipped.length === 0) {\n    setFlipped([id]);\n    setDisabled(false);\n    return;\n  } else {\n    if (sameCardClicked(id)) {\n      setDisabled(false);\n      return;\n    }\n\n    setFlipped([flipped[0], id]);\n\n    if (isMatch(id)) {\n      setSolved([...solved, flipped[0], id]);\n      setFlipped([]);\n      resetCards();\n    } else {\n      setTimeout(resetCards, 1500);\n    }\n  }\n};\n\nconst Easy = () => {\n  //const [Counter, setCounter] = useState(1);\n  const _useState11 = useState([]),\n        _useState12 = _slicedToArray(_useState11, 2),\n        cards = _useState12[0],\n        setCards = _useState12[1];\n\n  const _useState13 = useState([]),\n        _useState14 = _slicedToArray(_useState13, 2),\n        flipped = _useState14[0],\n        setFlipped = _useState14[1];\n\n  const _useState15 = useState(400),\n        _useState16 = _slicedToArray(_useState15, 2),\n        dimension = _useState16[0],\n        setDimension = _useState16[1];\n\n  const _useState17 = useState([]),\n        _useState18 = _slicedToArray(_useState17, 2),\n        solved = _useState18[0],\n        setSolved = _useState18[1];\n\n  const _useState19 = useState(false),\n        _useState20 = _slicedToArray(_useState19, 2),\n        disabled = _useState20[0],\n        setDisabled = _useState20[1];\n\n  useEffect(() => {\n    resizeBoard();\n    setCards(initializeDeck());\n  }, []);\n  useEffect(() => {\n    preloadImages();\n  }, cards);\n  useEffect(() => {\n    const resizeListener = window.addEventListener('resize', resizeBoard);\n    return () => window.removeEventListener('resize', resizeListener);\n  });\n\n  const handleClick = id => {\n    setDisabled(true);\n\n    if (flipped.length === 0) {\n      setFlipped([id]);\n      setDisabled(false);\n      return;\n    } else {\n      if (sameCardClicked(id)) {\n        setDisabled(false);\n        return;\n      }\n\n      setFlipped([flipped[0], id]);\n\n      if (isMatch(id)) {\n        setSolved([...solved, flipped[0], id]);\n        setFlipped([]);\n        resetCards();\n      } else {\n        setTimeout(resetCards, 1500);\n      }\n    }\n  };\n\n  const preloadImages = () => {\n    cards.map(card => {\n      const src = \"/img/\".concat(card.type, \".png\");\n      new Image().src = src;\n    });\n  };\n\n  const resetCards = () => {\n    setFlipped([]);\n    setDisabled(false);\n  };\n\n  const sameCardClicked = id => flipped.includes(id);\n\n  const isMatch = id => {\n    const clickedCard = cards.find(card => card.id === id);\n    const flippedCard = cards.find(card => flipped[0] === card.id);\n    return flippedCard.type === clickedCard.type;\n  };\n\n  const resizeBoard = () => {\n    setDimension(Math.min(document.documentElement.clientWidth, document.documentElement.clientHeight));\n  };\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, \"Memory Game\"), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, \"Match them all !\"), React.createElement(\"div\", {\n    className: \"board\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, React.createElement(Board, {\n    className: \"board\",\n    dimension: dimension,\n    cards: cards,\n    flipped: flipped,\n    handleClick: handleClick,\n    disabled: disabled,\n    solved: solved,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  })));\n};\n\nconst EventHandler = props => {\n  return React.createElement(\"button\", {\n    onClick: props.onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, React.createElement(Board, {\n    className: \"board\",\n    dimension: dimension,\n    cards: cards,\n    flipped: flipped,\n    handleClick: handleClick,\n    disabled: disabled,\n    solved: solved,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }));\n};\n\nEventHandler.propTypes = {\n  onClick: PropTypes.func\n};\nEventHandler.defaultProps = {};\nexport default EventHandler;","map":{"version":3,"sources":["D:\\Arek\\programowanie\\CODERSTRUST\\React\\proba\\proba\\src\\components\\EventHandler\\EventHandler.jsx"],"names":["React","Component","useState","useEffect","PropTypes","Board","initializeDeck","Counter","cards","setCards","flipped","setFlipped","dimension","setDimension","solved","setSolved","disabled","setDisabled","handleClick","id","length","sameCardClicked","isMatch","resetCards","setTimeout","Easy","resizeBoard","preloadImages","resizeListener","window","addEventListener","removeEventListener","map","card","src","type","Image","includes","clickedCard","find","flippedCard","Math","min","document","documentElement","clientWidth","clientHeight","EventHandler","props","onClick","propTypes","func","defaultProps"],"mappings":"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","sourcesContent":["import React, {Component, useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Board from '../board';\r\nimport initializeDeck from '../gamelevels/deck';\r\nimport Counter from '../counter/Counter';\r\n//import Easy from '../gamelevels/easy';\r\n\r\nconst [cards, setCards] = useState([])\r\nconst [flipped, setFlipped] = useState([])\r\nconst [dimension, setDimension] = useState(400)\r\nconst [solved, setSolved] = useState([])\r\nconst [disabled, setDisabled] = useState(false)\r\n\r\nconst handleClick = (id) => {\r\n  setDisabled(true)\r\n  if (flipped.length === 0) {\r\n    setFlipped([id])\r\n    setDisabled(false)\r\n    return\r\n  } else {\r\n    if (sameCardClicked(id)) {\r\n    setDisabled(false)\r\n    return\r\n    }\r\n    setFlipped([flipped[0], id])\r\n    if (isMatch(id)) {\r\n      setSolved([...solved, flipped[0], id])\r\n      setFlipped([])\r\n      resetCards()\r\n    } else {\r\n      setTimeout(resetCards, 1500)\r\n    }\r\n  }\r\n}\r\n\r\nconst Easy = () => {\r\n\r\n  //const [Counter, setCounter] = useState(1);\r\n  const [cards, setCards] = useState([])\r\n  const [flipped, setFlipped] = useState([])\r\n  const [dimension, setDimension] = useState(400)\r\n  const [solved, setSolved] = useState([])\r\n  const [disabled, setDisabled] = useState(false)\r\n\r\n  useEffect(() => {\r\n    resizeBoard()\r\n    setCards(initializeDeck())\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    preloadImages()\r\n  }, cards)\r\n\r\n\r\n  useEffect(() => {\r\n    const resizeListener = window.addEventListener('resize', resizeBoard)\r\n\r\n    return () => window.removeEventListener('resize', resizeListener)\r\n  })\r\n\r\n  const handleClick = (id) => {\r\n    setDisabled(true)\r\n    if (flipped.length === 0) {\r\n      setFlipped([id])\r\n      setDisabled(false)\r\n      return\r\n    } else {\r\n      if (sameCardClicked(id)) {\r\n      setDisabled(false)\r\n      return\r\n      }\r\n      setFlipped([flipped[0], id])\r\n      if (isMatch(id)) {\r\n        setSolved([...solved, flipped[0], id])\r\n        setFlipped([])\r\n        resetCards()\r\n      } else {\r\n        setTimeout(resetCards, 1500)\r\n      }\r\n    }\r\n  }\r\n\r\n  const preloadImages = () => {\r\n    cards.map((card) => {\r\n      const src = `/img/${card.type}.png`\r\n      new Image().src = src\r\n    })\r\n  }\r\n\r\n  const resetCards = () => {\r\n    setFlipped([])\r\n    setDisabled(false)\r\n\r\n  }\r\n \r\n  const sameCardClicked = (id) => flipped.includes(id)\r\n\r\n  const isMatch = (id) => {\r\n    const clickedCard = cards.find((card) => card.id === id)\r\n    const flippedCard = cards.find((card) => flipped[0] === card.id)\r\n    return flippedCard.type === clickedCard.type\r\n  }\r\n\r\n  const resizeBoard = () => {\r\n    setDimension(Math.min(\r\n      document.documentElement.clientWidth,\r\n      document.documentElement.clientHeight,\r\n    ))\r\n  } \r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Memory Game</h1>\r\n      <h2>Match them all !</h2>\r\n      <div className=\"board\">\r\n        <Board className=\"board\"\r\n        dimension={dimension}\r\n        cards={cards}\r\n        flipped={flipped}\r\n        handleClick={handleClick}\r\n        disabled={disabled}\r\n        solved={solved}\r\n        />\r\n\r\n      </div> \r\n    </div>\r\n  );\r\n}\r\n\r\n    \r\nconst EventHandler = (props) => {\r\n  return (\r\n    <button onClick={props.onClick}>\r\n      <Board className=\"board\"\r\n      dimension={dimension}\r\n      cards={cards}\r\n      flipped={flipped}\r\n      handleClick={handleClick}\r\n      disabled={disabled}\r\n      solved={solved} />\r\n    </button >\r\n  )\r\n}\r\n  \r\n      \r\nEventHandler.propTypes = {\r\n  onClick: PropTypes.func\r\n}\r\nEventHandler.defaultProps = {};\r\n\r\n\r\nexport default EventHandler;\r\n"]},"metadata":{},"sourceType":"module"}