{"ast":null,"code":"import _slicedToArray from \"D:\\\\Arek\\\\programowanie\\\\CODERSTRUST\\\\React\\\\proba\\\\proba\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Arek\\\\programowanie\\\\CODERSTRUST\\\\React\\\\proba\\\\proba\\\\src\\\\components\\\\EventHandler\\\\EventHandler.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Easy from '../gamelevels/easy';\n\nconst EventHandler = props => {\n  return React.createElement(\"button\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, \"onClick=\", () => {\n    function Easy() {\n      const _useState = useState(1),\n            _useState2 = _slicedToArray(_useState, 2),\n            counter = _useState2[0],\n            setCounter = _useState2[1];\n\n      const _useState3 = useState([]),\n            _useState4 = _slicedToArray(_useState3, 2),\n            cards = _useState4[0],\n            setCards = _useState4[1];\n\n      const _useState5 = useState([]),\n            _useState6 = _slicedToArray(_useState5, 2),\n            flipped = _useState6[0],\n            setFlipped = _useState6[1];\n\n      const _useState7 = useState(400),\n            _useState8 = _slicedToArray(_useState7, 2),\n            dimension = _useState8[0],\n            setDimension = _useState8[1];\n\n      const _useState9 = useState([]),\n            _useState10 = _slicedToArray(_useState9, 2),\n            solved = _useState10[0],\n            setSolved = _useState10[1];\n\n      const _useState11 = useState(false),\n            _useState12 = _slicedToArray(_useState11, 2),\n            disabled = _useState12[0],\n            setDisabled = _useState12[1];\n\n      useEffect(() => {\n        resizeBoard();\n        setCards(initializeDeck());\n      }, []);\n      useEffect(() => {\n        preloadImages();\n      }, cards);\n      useEffect(() => {\n        const resizeListener = window.addEventListener('resize', resizeBoard);\n        return () => window.removeEventListener('resize', resizeListener);\n      });\n\n      const handleClick = id => {\n        setDisabled(true);\n\n        if (flipped.length === 0) {\n          setFlipped([id]);\n          setDisabled(false);\n          return;\n        } else {\n          if (sameCardClicked(id)) {\n            setDisabled(false);\n            return;\n          }\n\n          setFlipped([flipped[0], id]);\n\n          if (isMatch(id)) {\n            setSolved([...solved, flipped[0], id]);\n            setFlipped([]);\n            resetCards();\n          } else {\n            setTimeout(resetCards, 1500);\n          }\n        }\n      };\n\n      const preloadImages = () => {\n        cards.map(card => {\n          const src = \"/img/\".concat(card.type, \".png\");\n          new Image().src = src;\n        });\n      };\n\n      const resetCards = () => {\n        setFlipped([]);\n        setDisabled(false);\n      };\n\n      const startGame = () => {};\n\n      const sameCardClicked = id => flipped.includes(id);\n\n      const isMatch = id => {\n        const clickedCard = cards.find(card => card.id === id);\n        const flippedCard = cards.find(card => flipped[0] === card.id);\n        return flippedCard.type === clickedCard.type;\n      };\n\n      const resizeBoard = () => {\n        setDimension(Math.min(document.documentElement.clientWidth, document.documentElement.clientHeight));\n      };\n\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, \"Memory Game\"), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \"Match them all !\"), React.createElement(\"div\", {\n        className: \"board\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(Board, {\n        className: \"board\",\n        dimension: dimension,\n        cards: cards,\n        flipped: flipped,\n        handleClick: handleClick,\n        disabled: disabled,\n        solved: solved,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      })));\n    }\n  });\n};\n\nEventHandler.propTypes = {};\nEventHandler.defaultProps = {};\nexport default EventHandler;","map":{"version":3,"sources":["D:\\Arek\\programowanie\\CODERSTRUST\\React\\proba\\proba\\src\\components\\EventHandler\\EventHandler.jsx"],"names":["React","PropTypes","Easy","EventHandler","props","useState","counter","setCounter","cards","setCards","flipped","setFlipped","dimension","setDimension","solved","setSolved","disabled","setDisabled","useEffect","resizeBoard","initializeDeck","preloadImages","resizeListener","window","addEventListener","removeEventListener","handleClick","id","length","sameCardClicked","isMatch","resetCards","setTimeout","map","card","src","type","Image","startGame","includes","clickedCard","find","flippedCard","Math","min","document","documentElement","clientWidth","clientHeight","propTypes","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Easy from '../gamelevels/easy';\r\n\r\nconst EventHandler = props => {\r\n    return (\r\n        <button>\r\n            onClick={() => {\r\n               function Easy() {\r\n                const [counter, setCounter] = useState(1);\r\n                const [cards, setCards] = useState([])\r\n                const [flipped, setFlipped] = useState([])\r\n                const [dimension, setDimension] = useState(400)\r\n                const [solved, setSolved] = useState([])\r\n                const [disabled, setDisabled] = useState(false)\r\n              \r\n                useEffect(() => {\r\n                  resizeBoard()\r\n                  setCards(initializeDeck())\r\n                }, [])\r\n              \r\n                useEffect(() => {\r\n                  preloadImages()\r\n                }, cards)\r\n              \r\n              \r\n                useEffect(() => {\r\n                  const resizeListener = window.addEventListener('resize', resizeBoard)\r\n                \r\n                  return () => window.removeEventListener('resize', resizeListener)\r\n                })\r\n              \r\n                const handleClick = (id) => {\r\n                  setDisabled(true)\r\n                  if (flipped.length === 0) {\r\n                    setFlipped([id])\r\n                    setDisabled(false)\r\n                    return\r\n                  } else {\r\n                    if (sameCardClicked(id)) {\r\n                    setDisabled(false)\r\n                    return\r\n                    }\r\n                    setFlipped([flipped[0], id])\r\n                    if (isMatch(id)) {\r\n                      setSolved([...solved, flipped[0], id])\r\n                      setFlipped([])\r\n                      resetCards()\r\n                    } else {\r\n                      setTimeout(resetCards, 1500)\r\n                    }\r\n                  }\r\n                }\r\n              \r\n                const preloadImages = () => {\r\n                  cards.map((card) => {\r\n                    const src = `/img/${card.type}.png`\r\n                    new Image().src = src\r\n                  })\r\n                }\r\n                \r\n                const resetCards = () => {\r\n                  setFlipped([])\r\n                  setDisabled(false)\r\n                \r\n                }\r\n                const startGame = () => {\r\n                \r\n                }\r\n                \r\n              \r\n                const sameCardClicked = (id) => flipped.includes(id)\r\n              \r\n                const isMatch = (id) => {\r\n                  const clickedCard = cards.find((card) => card.id === id)\r\n                  const flippedCard = cards.find((card) => flipped[0] === card.id)\r\n                  return flippedCard.type === clickedCard.type\r\n                }\r\n              \r\n                const resizeBoard = () => {\r\n                  setDimension(Math.min(\r\n                    document.documentElement.clientWidth,\r\n                    document.documentElement.clientHeight,\r\n                  ))\r\n                } \r\n              \r\n              \r\n                return (\r\n                  <div className=\"App\">\r\n                    <h1>Memory Game</h1>\r\n                    <h2>Match them all !</h2>\r\n                  <div className=\"board\">\r\n                      <Board className=\"board\"\r\n                        dimension={dimension}\r\n                        cards={cards}\r\n                        flipped={flipped}\r\n                        handleClick={handleClick}\r\n                        disabled={disabled}\r\n                        solved={solved}\r\n                      />\r\n                    </div> \r\n                  </div>\r\n                );\r\n              }\r\n            }}\r\n        </button>\r\n    );\r\n};\r\n\r\n\r\nEventHandler.propTypes = {};\r\nEventHandler.defaultProps = {};\r\n\r\nexport default EventHandler;\r\n\r\n"]},"metadata":{},"sourceType":"module"}